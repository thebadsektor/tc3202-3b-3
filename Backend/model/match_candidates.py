# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uEEhG3dqROpCsWovbMWM-W3gC-s6Sc-Q
"""

import pandas as pd
from sklearn.neighbors import NearestNeighbors
import numpy as np

# ✅ Mapping candidate values → your user-defined values
value_mapping = {
    "proactive engagement": "Responsiveness",
    "compassion": "Compassion",
    "creativity": "Creativity",
    "altruism": "Generosity of Spirit",
    "responsibility": "Responsibility",
    "stability": "Balance",
    "open-mindedness": "Open-mindedness",
    "individual freedom": "Liberty",
    "patriotism": "Tradition",
    "balance": "Work-Life Balance",
    "rational innovation": "Innovation",
    "social equity": "Social Justice",
    "forward-thinking": "Responsibility",
    "cultural preservation": "Tradition",
    "gender equity": "Equality in Love and Relationships",
    "international cooperation": "Community",
    "progressive": "Social Responsibility",
    "innovative": "Innovation",
    "leadership": "Goal Achievement",
    "unity": "Unity in Diversity",
    "freedom": "Freedom of Speech",
    "adaptability": "Resilience",
    "visionary": "Ambition",
    "collaborative": "Collaboration",
    "sustainability": "Sustainability",
    "rule-following": "Responsibility"
}

# ✅ Mapping predicted user values → your defined values
predicted_value_mapping = {
    "efficiency": "Hard Work",
    "logic": "Truth-Seeking",
    "goal achievement": "Ambition",
    "planning": "Responsibility",
    "objectivity": "Truth-Seeking"
}

def map_candidate_values(values_list):
    return [value_mapping.get(v.strip().lower(), v.strip().lower()) for v in values_list]

def map_predicted_user_values(predicted_values):
    return [predicted_value_mapping.get(v.strip().lower(), v.strip().lower()) for v in predicted_values]

def values_to_vector(values, all_possible_values):
    vector = np.zeros(len(all_possible_values))
    for v in values:
        v_lower = v.lower()
        if v_lower in all_possible_values:
            vector[all_possible_values.index(v_lower)] = 1
    return vector

def match_candidates(user_values, csv_path='../../../senator_candidates.csv'):
    # Normalize and map user values
    user_values = map_predicted_user_values([v.strip() for v in user_values])

    df = pd.read_csv(csv_path)
    df = pd.DataFrame(df, columns=["candidate_name", "party", "inferred_values"])

    # Split and map candidate values
    df["inferred_values"] = df["inferred_values"].fillna("").apply(lambda x: [i.strip() for i in x.split(",")])
    df["mapped_values"] = df["inferred_values"].apply(map_candidate_values)

    # Create a list of all unique values for vectorization
    all_possible_values = list(set([val.lower() for sublist in df["mapped_values"].tolist() for val in sublist] + [v.lower() for v in user_values]))

    candidate_vectors = np.array([values_to_vector(values, all_possible_values) for values in df["mapped_values"]])
    user_vector = np.array(values_to_vector(user_values, all_possible_values)).reshape(1, -1)

    knn = NearestNeighbors(n_neighbors=5, metric='cosine')
    knn.fit(candidate_vectors)

    distances, indices = knn.kneighbors(user_vector)
    top_matches = df.iloc[indices[0]].copy()

    return top_matches[["candidate_name", "party"]].to_dict(orient="records")
